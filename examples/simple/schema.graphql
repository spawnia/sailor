type Query {
    scalarWithArg(arg: String): ID
    twoArgs(first: String, second: Int): ID
    singleObject: SomeObject
}

type Mutation {
    takeSomeInput(input: SomeInput): Int
}

type SomeObject {
    value: Int
    nested: SomeObject
}

input SomeInput {
    id: ID!
    name: String
    value: SomeEnum
    matrix: [[Int]!]!
    nested: SomeInput
}

enum SomeEnum {
    A
    B
}
